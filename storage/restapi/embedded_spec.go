// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Storage API",
    "contact": {
      "email": "yguyomar@youwol.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://www.youwol.com"
    },
    "version": "0.0.4"
  },
  "host": "storage",
  "basePath": "/api/v0-alpha1",
  "paths": {
    "/bucket": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "bucket"
        ],
        "summary": "Add a new bucket",
        "operationId": "addBucket",
        "parameters": [
          {
            "description": "Description of the bucket to add",
            "name": "bucket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/bucket/{bucketName}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "bucket"
        ],
        "summary": "Delete an existing bucket",
        "operationId": "deleteBucket",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the bucket to delete",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Force deletion of the bucket even if not empty",
            "name": "forceNotEmpty",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete complete",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/buckets": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "bucket"
        ],
        "summary": "Get the list of buckets",
        "operationId": "getBuckets",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/BucketList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/file": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "file"
        ],
        "summary": "Add a new object into a bucket",
        "operationId": "addFile",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "The only way to send untransformed binary data with Swagger 2.0 is to use file type. We could switch to string/byte format but that requires the bytes to be Base64 encoded. We keep file for the moment, for performance purposes.",
            "name": "objectData",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "objectSize",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "A (flat) map of string key/values",
            "name": "user_metadata",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_type",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_encoding",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_disposition",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_language",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "cache_control",
            "in": "formData"
          },
          {
            "type": "integer",
            "name": "num_threads",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "TODO",
            "name": "server_side_encryption",
            "in": "formData"
          },
          {
            "enum": [
              "REDUCED_REDUNDANCY",
              "STANDARD"
            ],
            "type": "string",
            "default": "STANDARD",
            "name": "storage_class",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "uri",
            "name": "website_redirect_location",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "",
            "name": "owner",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/object": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "object"
        ],
        "summary": "Retrieves an object from a bucket",
        "operationId": "getObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional encryption setting",
            "name": "server_side_encryption",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "object"
        ],
        "summary": "Add a new object into a bucket",
        "operationId": "addObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          },
          {
            "description": "data is a descriptor of the object to store (object data + options)",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "object"
        ],
        "summary": "Delete an object from a bucket",
        "operationId": "deleteObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/objectinfo": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "objectinfo"
        ],
        "summary": "Retrieves an object metadata from a bucket",
        "operationId": "getObjectInfo",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ObjectInfo"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/objects": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "objects"
        ],
        "summary": "Retrieve a list of object information in a bucket",
        "operationId": "getObjects",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Prefix of names to retrieve",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to look in subfolders",
            "name": "recursive",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ObjectInfoList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "objects"
        ],
        "summary": "Delete a list of objects in a bucket",
        "operationId": "deleteObjects",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Prefix of names to retrieve",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to look in subfolders",
            "name": "recursive",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Bucket": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "creation_date": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "BucketList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Bucket"
      }
    },
    "Object": {
      "type": "object",
      "required": [
        "object"
      ],
      "properties": {
        "object": {
          "$ref": "#/definitions/ObjectData"
        },
        "options": {
          "$ref": "#/definitions/ObjectOptions"
        }
      }
    },
    "ObjectData": {
      "type": "object",
      "properties": {
        "data": {
          "description": "base64 encoded file data",
          "type": "string",
          "format": "byte"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ObjectInfo": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "last_modified": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "storage_class": {
          "type": "string"
        }
      }
    },
    "ObjectInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ObjectInfo"
      }
    },
    "ObjectOptions": {
      "type": "object",
      "properties": {
        "cache_control": {
          "type": "string"
        },
        "content_disposition": {
          "type": "string"
        },
        "content_encoding": {
          "type": "string"
        },
        "content_language": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "num_threads": {
          "type": "integer"
        },
        "server_side_encryption": {
          "description": "TODO",
          "type": "string"
        },
        "storage_class": {
          "type": "string",
          "default": "STANDARD",
          "enum": [
            "REDUCED_REDUNDANCY",
            "STANDARD"
          ]
        },
        "user_metadata": {
          "description": "A (flat) map of string-only key/values",
          "type": "object"
        },
        "website_redirect_location": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "Owner": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "for internal use only",
          "type": "string"
        },
        "kind": {
          "description": "for internal use only",
          "type": "string",
          "default": "user",
          "enum": [
            "user",
            "group"
          ]
        },
        "name": {
          "description": "group path",
          "type": "string"
        }
      }
    },
    "Principal": {
      "type": "object",
      "required": [
        "sub"
      ],
      "properties": {
        "address": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean"
        },
        "member_of": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "preferred_username": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Buckets provide isolation between object storage spaces",
      "name": "bucket"
    },
    {
      "description": "Objects can be stored and retrieved from buckets",
      "name": "object"
    },
    {
      "description": "Requests that act on a group of objects",
      "name": "objects"
    },
    {
      "description": "To be used from a browser application (uses local file system)",
      "name": "file"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Storage API",
    "contact": {
      "email": "yguyomar@youwol.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://www.youwol.com"
    },
    "version": "0.0.4"
  },
  "host": "storage",
  "basePath": "/api/v0-alpha1",
  "paths": {
    "/bucket": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "bucket"
        ],
        "summary": "Add a new bucket",
        "operationId": "addBucket",
        "parameters": [
          {
            "description": "Description of the bucket to add",
            "name": "bucket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/bucket/{bucketName}": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "bucket"
        ],
        "summary": "Delete an existing bucket",
        "operationId": "deleteBucket",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the bucket to delete",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Force deletion of the bucket even if not empty",
            "name": "forceNotEmpty",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete complete",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/buckets": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "bucket"
        ],
        "summary": "Get the list of buckets",
        "operationId": "getBuckets",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/BucketList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/file": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "file"
        ],
        "summary": "Add a new object into a bucket",
        "operationId": "addFile",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "The only way to send untransformed binary data with Swagger 2.0 is to use file type. We could switch to string/byte format but that requires the bytes to be Base64 encoded. We keep file for the moment, for performance purposes.",
            "name": "objectData",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "objectSize",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "A (flat) map of string key/values",
            "name": "user_metadata",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_type",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_encoding",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_disposition",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "content_language",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "cache_control",
            "in": "formData"
          },
          {
            "type": "integer",
            "name": "num_threads",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "TODO",
            "name": "server_side_encryption",
            "in": "formData"
          },
          {
            "enum": [
              "REDUCED_REDUNDANCY",
              "STANDARD"
            ],
            "type": "string",
            "default": "STANDARD",
            "name": "storage_class",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "uri",
            "name": "website_redirect_location",
            "in": "formData"
          },
          {
            "type": "string",
            "default": "",
            "name": "owner",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/object": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "object"
        ],
        "summary": "Retrieves an object from a bucket",
        "operationId": "getObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional encryption setting",
            "name": "server_side_encryption",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "object"
        ],
        "summary": "Add a new object into a bucket",
        "operationId": "addObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          },
          {
            "description": "data is a descriptor of the object to store (object data + options)",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "object"
        ],
        "summary": "Delete an object from a bucket",
        "operationId": "deleteObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/objectinfo": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "objectinfo"
        ],
        "summary": "Retrieves an object metadata from a bucket",
        "operationId": "getObjectInfo",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "objectName",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ObjectInfo"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{bucketName}/objects": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "objects"
        ],
        "summary": "Retrieve a list of object information in a bucket",
        "operationId": "getObjects",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Prefix of names to retrieve",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to look in subfolders",
            "name": "recursive",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ObjectInfoList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "objects"
        ],
        "summary": "Delete a list of objects in a bucket",
        "operationId": "deleteObjects",
        "parameters": [
          {
            "type": "string",
            "name": "bucketName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Prefix of names to retrieve",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to look in subfolders",
            "name": "recursive",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Should the server automatically isolate data between owners",
            "name": "isolation",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the object belong to ? Defaults to current user. Indicate a group path to act on a shared object",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Bucket": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "creation_date": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "BucketList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Bucket"
      }
    },
    "Object": {
      "type": "object",
      "required": [
        "object"
      ],
      "properties": {
        "object": {
          "$ref": "#/definitions/ObjectData"
        },
        "options": {
          "$ref": "#/definitions/ObjectOptions"
        }
      }
    },
    "ObjectData": {
      "type": "object",
      "properties": {
        "data": {
          "description": "base64 encoded file data",
          "type": "string",
          "format": "byte"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ObjectInfo": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "last_modified": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "storage_class": {
          "type": "string"
        }
      }
    },
    "ObjectInfoList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ObjectInfo"
      }
    },
    "ObjectInfoOwner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ObjectOptions": {
      "type": "object",
      "properties": {
        "cache_control": {
          "type": "string"
        },
        "content_disposition": {
          "type": "string"
        },
        "content_encoding": {
          "type": "string"
        },
        "content_language": {
          "type": "string"
        },
        "content_type": {
          "type": "string"
        },
        "num_threads": {
          "type": "integer"
        },
        "server_side_encryption": {
          "description": "TODO",
          "type": "string"
        },
        "storage_class": {
          "type": "string",
          "default": "STANDARD",
          "enum": [
            "REDUCED_REDUNDANCY",
            "STANDARD"
          ]
        },
        "user_metadata": {
          "description": "A (flat) map of string-only key/values",
          "type": "object"
        },
        "website_redirect_location": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "Owner": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "for internal use only",
          "type": "string"
        },
        "kind": {
          "description": "for internal use only",
          "type": "string",
          "default": "user",
          "enum": [
            "user",
            "group"
          ]
        },
        "name": {
          "description": "group path",
          "type": "string"
        }
      }
    },
    "Principal": {
      "type": "object",
      "required": [
        "sub"
      ],
      "properties": {
        "address": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean"
        },
        "member_of": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "preferred_username": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Buckets provide isolation between object storage spaces",
      "name": "bucket"
    },
    {
      "description": "Objects can be stored and retrieved from buckets",
      "name": "object"
    },
    {
      "description": "Requests that act on a group of objects",
      "name": "objects"
    },
    {
      "description": "To be used from a browser application (uses local file system)",
      "name": "file"
    }
  ]
}`))
}
