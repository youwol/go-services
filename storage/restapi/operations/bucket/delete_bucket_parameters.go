// Code generated by go-swagger; DO NOT EDIT.

package bucket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteBucketParams creates a new DeleteBucketParams object
// with the default values initialized.
func NewDeleteBucketParams() DeleteBucketParams {

	var (
		// initialize parameters with default values

		forceNotEmptyDefault = bool(false)
	)

	return DeleteBucketParams{
		ForceNotEmpty: &forceNotEmptyDefault,
	}
}

// DeleteBucketParams contains all the bound params for the delete bucket operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteBucket
type DeleteBucketParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Name of the bucket to delete
	  Required: true
	  In: path
	*/
	BucketName string
	/*Force deletion of the bucket even if not empty
	  In: query
	  Default: false
	*/
	ForceNotEmpty *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteBucketParams() beforehand.
func (o *DeleteBucketParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rBucketName, rhkBucketName, _ := route.Params.GetOK("bucketName")
	if err := o.bindBucketName(rBucketName, rhkBucketName, route.Formats); err != nil {
		res = append(res, err)
	}

	qForceNotEmpty, qhkForceNotEmpty, _ := qs.GetOK("forceNotEmpty")
	if err := o.bindForceNotEmpty(qForceNotEmpty, qhkForceNotEmpty, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBucketName binds and validates parameter BucketName from path.
func (o *DeleteBucketParams) bindBucketName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.BucketName = raw

	return nil
}

// bindForceNotEmpty binds and validates parameter ForceNotEmpty from query.
func (o *DeleteBucketParams) bindForceNotEmpty(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewDeleteBucketParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("forceNotEmpty", "query", "bool", raw)
	}
	o.ForceNotEmpty = &value

	return nil
}
