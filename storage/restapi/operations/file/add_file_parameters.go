// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewAddFileParams creates a new AddFileParams object
// with the default values initialized.
func NewAddFileParams() AddFileParams {

	var (
		// initialize parameters with default values

		isolationDefault = bool(true)

		ownerDefault = string("")

		storageClassDefault = string("STANDARD")
	)

	return AddFileParams{
		Isolation: &isolationDefault,

		Owner: &ownerDefault,

		StorageClass: &storageClassDefault,
	}
}

// AddFileParams contains all the bound params for the add file operation
// typically these are obtained from a http.Request
//
// swagger:parameters addFile
type AddFileParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	BucketName string
	/*
	  In: formData
	*/
	CacheControl *string
	/*
	  In: formData
	*/
	ContentDisposition *string
	/*
	  In: formData
	*/
	ContentEncoding *string
	/*
	  In: formData
	*/
	ContentLanguage *string
	/*
	  In: formData
	*/
	ContentType *string
	/*Should the server automatically isolate data between owners
	  In: formData
	  Default: true
	*/
	Isolation *bool
	/*
	  In: formData
	*/
	NumThreads *int64
	/*The only way to send untransformed binary data with Swagger 2.0 is to use file type. We could switch to string/byte format but that requires the bytes to be Base64 encoded. We keep file for the moment, for performance purposes.
	  Required: true
	  In: formData
	*/
	ObjectData io.ReadCloser
	/*
	  Required: true
	  In: formData
	*/
	ObjectName string
	/*
	  Required: true
	  In: formData
	*/
	ObjectSize int64
	/*
	  In: formData
	  Default: ""
	*/
	Owner *string
	/*TODO
	  In: formData
	*/
	ServerSideEncryption *string
	/*
	  In: formData
	  Default: "STANDARD"
	*/
	StorageClass *string
	/*A (flat) map of string key/values
	  In: formData
	*/
	UserMetadata *string
	/*
	  In: formData
	*/
	WebsiteRedirectLocation *strfmt.URI
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAddFileParams() beforehand.
func (o *AddFileParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	rBucketName, rhkBucketName, _ := route.Params.GetOK("bucketName")
	if err := o.bindBucketName(rBucketName, rhkBucketName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCacheControl, fdhkCacheControl, _ := fds.GetOK("cache_control")
	if err := o.bindCacheControl(fdCacheControl, fdhkCacheControl, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContentDisposition, fdhkContentDisposition, _ := fds.GetOK("content_disposition")
	if err := o.bindContentDisposition(fdContentDisposition, fdhkContentDisposition, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContentEncoding, fdhkContentEncoding, _ := fds.GetOK("content_encoding")
	if err := o.bindContentEncoding(fdContentEncoding, fdhkContentEncoding, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContentLanguage, fdhkContentLanguage, _ := fds.GetOK("content_language")
	if err := o.bindContentLanguage(fdContentLanguage, fdhkContentLanguage, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContentType, fdhkContentType, _ := fds.GetOK("content_type")
	if err := o.bindContentType(fdContentType, fdhkContentType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdIsolation, fdhkIsolation, _ := fds.GetOK("isolation")
	if err := o.bindIsolation(fdIsolation, fdhkIsolation, route.Formats); err != nil {
		res = append(res, err)
	}

	fdNumThreads, fdhkNumThreads, _ := fds.GetOK("num_threads")
	if err := o.bindNumThreads(fdNumThreads, fdhkNumThreads, route.Formats); err != nil {
		res = append(res, err)
	}

	objectData, objectDataHeader, err := r.FormFile("objectData")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "objectData", err))
	} else if err := o.bindObjectData(objectData, objectDataHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.ObjectData = &runtime.File{Data: objectData, Header: objectDataHeader}
	}

	fdObjectName, fdhkObjectName, _ := fds.GetOK("objectName")
	if err := o.bindObjectName(fdObjectName, fdhkObjectName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdObjectSize, fdhkObjectSize, _ := fds.GetOK("objectSize")
	if err := o.bindObjectSize(fdObjectSize, fdhkObjectSize, route.Formats); err != nil {
		res = append(res, err)
	}

	fdOwner, fdhkOwner, _ := fds.GetOK("owner")
	if err := o.bindOwner(fdOwner, fdhkOwner, route.Formats); err != nil {
		res = append(res, err)
	}

	fdServerSideEncryption, fdhkServerSideEncryption, _ := fds.GetOK("server_side_encryption")
	if err := o.bindServerSideEncryption(fdServerSideEncryption, fdhkServerSideEncryption, route.Formats); err != nil {
		res = append(res, err)
	}

	fdStorageClass, fdhkStorageClass, _ := fds.GetOK("storage_class")
	if err := o.bindStorageClass(fdStorageClass, fdhkStorageClass, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUserMetadata, fdhkUserMetadata, _ := fds.GetOK("user_metadata")
	if err := o.bindUserMetadata(fdUserMetadata, fdhkUserMetadata, route.Formats); err != nil {
		res = append(res, err)
	}

	fdWebsiteRedirectLocation, fdhkWebsiteRedirectLocation, _ := fds.GetOK("website_redirect_location")
	if err := o.bindWebsiteRedirectLocation(fdWebsiteRedirectLocation, fdhkWebsiteRedirectLocation, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBucketName binds and validates parameter BucketName from path.
func (o *AddFileParams) bindBucketName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.BucketName = raw

	return nil
}

// bindCacheControl binds and validates parameter CacheControl from formData.
func (o *AddFileParams) bindCacheControl(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CacheControl = &raw

	return nil
}

// bindContentDisposition binds and validates parameter ContentDisposition from formData.
func (o *AddFileParams) bindContentDisposition(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ContentDisposition = &raw

	return nil
}

// bindContentEncoding binds and validates parameter ContentEncoding from formData.
func (o *AddFileParams) bindContentEncoding(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ContentEncoding = &raw

	return nil
}

// bindContentLanguage binds and validates parameter ContentLanguage from formData.
func (o *AddFileParams) bindContentLanguage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ContentLanguage = &raw

	return nil
}

// bindContentType binds and validates parameter ContentType from formData.
func (o *AddFileParams) bindContentType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ContentType = &raw

	return nil
}

// bindIsolation binds and validates parameter Isolation from formData.
func (o *AddFileParams) bindIsolation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewAddFileParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("isolation", "formData", "bool", raw)
	}
	o.Isolation = &value

	return nil
}

// bindNumThreads binds and validates parameter NumThreads from formData.
func (o *AddFileParams) bindNumThreads(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("num_threads", "formData", "int64", raw)
	}
	o.NumThreads = &value

	return nil
}

// bindObjectData binds file parameter ObjectData.
//
// The only supported validations on files are MinLength and MaxLength
func (o *AddFileParams) bindObjectData(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindObjectName binds and validates parameter ObjectName from formData.
func (o *AddFileParams) bindObjectName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("objectName", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("objectName", "formData", raw); err != nil {
		return err
	}

	o.ObjectName = raw

	return nil
}

// bindObjectSize binds and validates parameter ObjectSize from formData.
func (o *AddFileParams) bindObjectSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("objectSize", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("objectSize", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("objectSize", "formData", "int64", raw)
	}
	o.ObjectSize = value

	return nil
}

// bindOwner binds and validates parameter Owner from formData.
func (o *AddFileParams) bindOwner(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewAddFileParams()
		return nil
	}

	o.Owner = &raw

	return nil
}

// bindServerSideEncryption binds and validates parameter ServerSideEncryption from formData.
func (o *AddFileParams) bindServerSideEncryption(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ServerSideEncryption = &raw

	return nil
}

// bindStorageClass binds and validates parameter StorageClass from formData.
func (o *AddFileParams) bindStorageClass(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewAddFileParams()
		return nil
	}

	o.StorageClass = &raw

	if err := o.validateStorageClass(formats); err != nil {
		return err
	}

	return nil
}

// validateStorageClass carries on validations for parameter StorageClass
func (o *AddFileParams) validateStorageClass(formats strfmt.Registry) error {

	if err := validate.EnumCase("storage_class", "formData", *o.StorageClass, []interface{}{"REDUCED_REDUNDANCY", "STANDARD"}, true); err != nil {
		return err
	}

	return nil
}

// bindUserMetadata binds and validates parameter UserMetadata from formData.
func (o *AddFileParams) bindUserMetadata(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UserMetadata = &raw

	return nil
}

// bindWebsiteRedirectLocation binds and validates parameter WebsiteRedirectLocation from formData.
func (o *AddFileParams) bindWebsiteRedirectLocation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uri
	value, err := formats.Parse("uri", raw)
	if err != nil {
		return errors.InvalidType("website_redirect_location", "formData", "strfmt.URI", raw)
	}
	o.WebsiteRedirectLocation = (value.(*strfmt.URI))

	if err := o.validateWebsiteRedirectLocation(formats); err != nil {
		return err
	}

	return nil
}

// validateWebsiteRedirectLocation carries on validations for parameter WebsiteRedirectLocation
func (o *AddFileParams) validateWebsiteRedirectLocation(formats strfmt.Registry) error {

	if err := validate.FormatOf("website_redirect_location", "formData", "uri", o.WebsiteRedirectLocation.String(), formats); err != nil {
		return err
	}
	return nil
}
