// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Principal principal
//
// swagger:model Principal
type Principal struct {

	// address
	Address interface{} `json:"address,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// email verified
	EmailVerified bool `json:"email_verified,omitempty"`

	// member of
	MemberOf []*UserGroup `json:"member_of"`

	// preferred username
	PreferredUsername string `json:"preferred_username,omitempty"`

	// sub
	// Required: true
	Sub *string `json:"sub"`
}

// Validate validates this principal
func (m *Principal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemberOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSub(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Principal) validateMemberOf(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberOf) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberOf); i++ {
		if swag.IsZero(m.MemberOf[i]) { // not required
			continue
		}

		if m.MemberOf[i] != nil {
			if err := m.MemberOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("member_of" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Principal) validateSub(formats strfmt.Registry) error {

	if err := validate.Required("sub", "body", m.Sub); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Principal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Principal) UnmarshalBinary(b []byte) error {
	var res Principal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
