// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Docdb API",
    "contact": {
      "email": "yguyomar@youwol.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://www.youwol.com"
    },
    "version": "0.1.1"
  },
  "host": "docdb",
  "basePath": "/api/v0-alpha1",
  "paths": {
    "/keyspace": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "keyspace"
        ],
        "summary": "Updates a keyspace in the store (keyspace name cannot be updated)",
        "operationId": "updateKeyspace",
        "parameters": [
          {
            "description": "Updated keyspace",
            "name": "keyspace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keyspace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "keyspace"
        ],
        "summary": "Add a new keyspace",
        "operationId": "addKeyspace",
        "parameters": [
          {
            "description": "Keyspace to be added",
            "name": "keyspace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keyspace"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keyspace/{keyspaceName}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single keyspace",
        "tags": [
          "keyspace"
        ],
        "summary": "Find a keyspace from name",
        "operationId": "getKeyspace",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to return",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Keyspace"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "keyspace"
        ],
        "summary": "Deletes a keyspace",
        "operationId": "deleteKeyspace",
        "parameters": [
          {
            "type": "string",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keyspaces": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a list of keyspaces names",
        "tags": [
          "keyspace"
        ],
        "summary": "Lists all keyspaces",
        "operationId": "getKeyspaces",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/KeyspaceList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/table": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update the table by either adding or removing column, or changing options",
        "tags": [
          "table"
        ],
        "summary": "Updates a table in the store (table name cannot be updated).",
        "operationId": "updateTable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "description": "Table update",
            "name": "table_update",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "table"
        ],
        "summary": "Add a new table (@see: https://docs.scylladb.com/getting-started/ddl/#create-table-statement)",
        "operationId": "addTable",
        "parameters": [
          {
            "type": "string",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "description": "table to be added",
            "name": "table",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Table"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/table/{tableName}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single table",
        "tags": [
          "table"
        ],
        "summary": "Find a table from name",
        "operationId": "getTable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "table"
        ],
        "summary": "Deletes a table",
        "operationId": "deleteTable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to delete",
            "name": "tableName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/tables": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns the list of table names in the keyspace",
        "tags": [
          "table"
        ],
        "summary": "Lists all tables in a keyspace",
        "operationId": "getTables",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TableList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/{tableName}/document": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single entity",
        "tags": [
          "document"
        ],
        "summary": "Find a document from partition \u0026 clustering keys",
        "operationId": "getDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Primary key of entity to return",
            "name": "partitionKey",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Key of entity to return",
            "name": "clusteringKey",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "Updates a document in the store",
        "operationId": "updateDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated document",
            "name": "document",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "Add a new document",
        "operationId": "addDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to delete",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Document to be added",
            "name": "document",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EntityId"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "Deletes document",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Primary key of the document to delete",
            "name": "partitionKey",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Key of the documeent to delete",
            "name": "clusteringKey",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/{tableName}/index": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "index"
        ],
        "summary": "Add a new table index (@see: https://docs.scylladb.com/getting-started/secondary_indexes)",
        "operationId": "addIndex",
        "parameters": [
          {
            "type": "string",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "description of the index to create",
            "name": "index",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Index"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "index"
        ],
        "summary": "Delete a table index (@see: https://docs.scylladb.com/getting-started/secondary_indexes)",
        "operationId": "deleteIndex",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "indexName",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/{tableName}/query": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a list of enities or compact (array) data",
        "tags": [
          "query"
        ],
        "summary": "Retrieves custom columns for a group of entities",
        "operationId": "selectQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Query to define the selection",
            "name": "select",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SelectStatement"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "For which owner do we do the query ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SelectResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "query"
        ],
        "summary": "Deletes a selection of entities",
        "operationId": "deleteQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Query to select the entities that will be deleted",
            "name": "delete",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteStatement"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "For which owner do we do the delete ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ClusteringOrder": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Order"
      }
    },
    "Column": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "primary_key": {
          "type": "boolean",
          "default": false
        },
        "static": {
          "type": "boolean",
          "default": false
        },
        "type": {
          "description": "Available values:\nCql_types: ascii, bigint, blob, boolean, counter, date, decimal, double, duration, float, inet, int, smallint, text, time, timestamp, timeuuid, tinyint, uuid, varchar, varint\nCollections: MAP\u003ccql_type,cql_type\u003e, SET\u003ccql_type\u003e, LIST\u003ccql_type\u003e\nTuples: TUPLE \u003ccql_type(,cql_type)*\u003e",
          "type": "string"
        }
      }
    },
    "ColumnUpdate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "description": "Available values:\nCql_types: ascii, bigint, blob, boolean, counter, date, decimal, double, duration, float, inet, int, smallint, text, time, timestamp, timeuuid, tinyint, uuid, varchar, varint\nCollections: MAP\u003ccql_type,cql_type\u003e, SET\u003ccql_type\u003e, LIST\u003ccql_type\u003e\nTuples: TUPLE \u003ccql_type(,cql_type)*\u003e",
          "type": "string"
        }
      }
    },
    "CompactionOptions": {
      "type": "object",
      "properties": {
        "bucket_high": {
          "description": "only for STCS, default 1.5",
          "type": "number"
        },
        "bucket_low": {
          "description": "only for STCS, default 0.5",
          "type": "number"
        },
        "class": {
          "type": "string",
          "default": "SizeTieredCompactionStrategy",
          "enum": [
            "SizeTieredCompactionStrategy",
            "TimeWindowCompactionStrategy",
            "LeveledCompactionStrategy"
          ]
        },
        "compaction_window_size": {
          "description": "only for TWCS, default 1",
          "type": "integer"
        },
        "compaction_window_unit": {
          "description": "only for TWCS, default DAYS",
          "type": "string",
          "enum": [
            "MINUTES",
            "HOURS",
            "DAYS"
          ]
        },
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "max_threshold": {
          "description": "only for STCS \u0026 TWCS, default 32",
          "type": "integer"
        },
        "min_sstable_size": {
          "description": "only for STCS, default 50",
          "type": "integer"
        },
        "min_threshold": {
          "description": "only for STCS \u0026 TWCS, default 4",
          "type": "integer"
        },
        "split_during_flush": {
          "description": "only for TWCS",
          "type": "boolean"
        },
        "sstable_size_in_mb": {
          "description": "only for LCS, default 160",
          "type": "integer"
        },
        "tombstone_compaction_interval": {
          "type": "integer",
          "default": 86400
        },
        "tombstone_threshold": {
          "type": "number",
          "default": 0.2
        }
      }
    },
    "CompressionOptions": {
      "type": "object",
      "properties": {
        "chunk_length_in_kb": {
          "type": "integer",
          "default": 4
        },
        "enabled": {
          "description": "DO NOT USE: https://github.com/scylladb/scylla/issues/2501",
          "type": "boolean",
          "default": true
        },
        "sstable_compression": {
          "type": "string",
          "default": "LZ4Compressor"
        }
      }
    },
    "DeleteStatement": {
      "description": "DELETE query description. @see: https://docs.scylladb.com/getting-started/dml/#delete-statement",
      "type": "object",
      "properties": {
        "condition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRelation"
          }
        },
        "simple_selection": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "where_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRelation"
          }
        }
      }
    },
    "Document": {
      "type": "object"
    },
    "EntityId": {
      "description": "The entity ID is the primary key of a document (combination of all primary columns values)",
      "type": "object"
    },
    "Index": {
      "description": "Decription of a table index entry",
      "type": "object",
      "required": [
        "name",
        "identifier"
      ],
      "properties": {
        "identifier": {
          "$ref": "#/definitions/IndexIdentifier"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "IndexIdentifier": {
      "description": "Decription of a table index identifier. If using a partition key, this will refer to a local secondary index, else it will be a global secondary index",
      "type": "object",
      "required": [
        "column_name"
      ],
      "properties": {
        "column_name": {
          "type": "string"
        },
        "option": {
          "type": "string",
          "default": "",
          "enum": [
            "",
            "keys",
            "values",
            "entries",
            "full"
          ]
        },
        "partition_key": {
          "type": "string"
        }
      }
    },
    "Keyspace": {
      "type": "object",
      "required": [
        "name",
        "replication"
      ],
      "properties": {
        "durable_writes": {
          "description": "Whether to use the commit log for updates on this keyspace (disable this option at your own risk!).",
          "type": "boolean",
          "default": true
        },
        "name": {
          "type": "string"
        },
        "replication": {
          "$ref": "#/definitions/Replication"
        }
      }
    },
    "KeyspaceList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "name",
        "order"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "order": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "Owner": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "for internal use only",
          "type": "string"
        },
        "kind": {
          "description": "for internal use only",
          "type": "string",
          "default": "user",
          "enum": [
            "user",
            "group"
          ]
        },
        "name": {
          "description": "group path",
          "type": "string"
        }
      }
    },
    "Principal": {
      "type": "object",
      "required": [
        "sub"
      ],
      "properties": {
        "address": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean"
        },
        "member_of": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "preferred_username": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      }
    },
    "Query": {
      "type": "object",
      "properties": {
        "ordering_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "where_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRelation"
          }
        }
      }
    },
    "QueryRelation": {
      "type": "object",
      "required": [
        "column",
        "relation",
        "term"
      ],
      "properties": {
        "column": {
          "type": "string"
        },
        "relation": {
          "$ref": "#/definitions/RelationOperator"
        },
        "term": {
          "type": "object"
        }
      }
    },
    "RelationOperator": {
      "type": "string",
      "enum": [
        "eq",
        "lt",
        "leq",
        "gt",
        "geq",
        "in",
        "cnt",
        "cntKey",
        "like"
      ]
    },
    "Replication": {
      "type": "object",
      "required": [
        "class"
      ],
      "properties": {
        "class": {
          "type": "string",
          "default": "SimpleStrategy",
          "enum": [
            "SimpleStrategy",
            "NetworkTopologyStrategy"
          ]
        },
        "replication_factor": {
          "type": "integer",
          "default": 3
        }
      }
    },
    "SelectClause": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        }
      }
    },
    "SelectResponse": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "object"
        },
        "documents": {
          "type": "object"
        },
        "iterator": {
          "type": "string"
        }
      }
    },
    "SelectStatement": {
      "description": "SELECT query description. @see: https://docs.scylladb.com/getting-started/dml/#select-statement",
      "type": "object",
      "required": [
        "max_results"
      ],
      "properties": {
        "allow_filtering": {
          "type": "boolean",
          "default": false
        },
        "distinct": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iterator": {
          "type": "string"
        },
        "max_results": {
          "type": "integer",
          "default": 100,
          "maximum": 1000,
          "minimum": 1
        },
        "mode": {
          "description": "Returns either a list of documents, or a list of arrays (one array per column)",
          "type": "string",
          "default": "documents",
          "enum": [
            "documents",
            "columns"
          ]
        },
        "query": {
          "$ref": "#/definitions/Query"
        },
        "select_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectClause"
          }
        }
      }
    },
    "Table": {
      "type": "object",
      "required": [
        "name",
        "columns",
        "partition_key"
      ],
      "properties": {
        "clustering_columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          }
        },
        "name": {
          "type": "string",
          "example": "entities"
        },
        "partition_key": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "table_options": {
          "$ref": "#/definitions/TableOptions"
        }
      }
    },
    "TableList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "TableOptions": {
      "description": "@see https://docs.scylladb.com/getting-started/ddl/#create-table-statement",
      "type": "object",
      "properties": {
        "bloom_filter_fp_chance": {
          "type": "number",
          "default": 0.00075
        },
        "clustering_order": {
          "$ref": "#/definitions/ClusteringOrder"
        },
        "comment": {
          "type": "string",
          "default": ""
        },
        "compaction": {
          "$ref": "#/definitions/CompactionOptions"
        },
        "compression": {
          "$ref": "#/definitions/CompressionOptions"
        },
        "dclocal_read_repair_chance": {
          "type": "number",
          "default": 0.1
        },
        "default_time_to_live": {
          "type": "integer",
          "default": 0
        },
        "gc_grace_seconds": {
          "type": "integer",
          "default": 864000
        },
        "memtable_flush_period_in_ms": {
          "type": "integer",
          "default": 0
        },
        "read_repair_chance": {
          "type": "integer",
          "default": 0
        },
        "speculative_retry": {
          "description": "@see https://docs.scylladb.com/getting-started/ddl/#speculative-retry-options",
          "type": "string",
          "default": "99PERCENTILE"
        }
      }
    },
    "TableUpdate": {
      "type": "object",
      "maxProperties": 2,
      "required": [
        "name"
      ],
      "properties": {
        "add_columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColumnUpdate"
          }
        },
        "drop_columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "example": "entities"
        },
        "table_options": {
          "$ref": "#/definitions/TableOptions"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Keyspace provides isolation between tables and contexts",
      "name": "keyspace"
    },
    {
      "description": "Basic description of a storage structure",
      "name": "table"
    },
    {
      "description": "Generic item storage",
      "name": "document"
    },
    {
      "description": "Retrieve or delete a group of documents per criteria",
      "name": "query"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Docdb API",
    "contact": {
      "email": "yguyomar@youwol.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://www.youwol.com"
    },
    "version": "0.1.1"
  },
  "host": "docdb",
  "basePath": "/api/v0-alpha1",
  "paths": {
    "/keyspace": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "keyspace"
        ],
        "summary": "Updates a keyspace in the store (keyspace name cannot be updated)",
        "operationId": "updateKeyspace",
        "parameters": [
          {
            "description": "Updated keyspace",
            "name": "keyspace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keyspace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "keyspace"
        ],
        "summary": "Add a new keyspace",
        "operationId": "addKeyspace",
        "parameters": [
          {
            "description": "Keyspace to be added",
            "name": "keyspace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keyspace"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keyspace/{keyspaceName}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single keyspace",
        "tags": [
          "keyspace"
        ],
        "summary": "Find a keyspace from name",
        "operationId": "getKeyspace",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to return",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Keyspace"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "keyspace"
        ],
        "summary": "Deletes a keyspace",
        "operationId": "deleteKeyspace",
        "parameters": [
          {
            "type": "string",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keyspaces": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a list of keyspaces names",
        "tags": [
          "keyspace"
        ],
        "summary": "Lists all keyspaces",
        "operationId": "getKeyspaces",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/KeyspaceList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/table": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Update the table by either adding or removing column, or changing options",
        "tags": [
          "table"
        ],
        "summary": "Updates a table in the store (table name cannot be updated).",
        "operationId": "updateTable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "description": "Table update",
            "name": "table_update",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "table"
        ],
        "summary": "Add a new table (@see: https://docs.scylladb.com/getting-started/ddl/#create-table-statement)",
        "operationId": "addTable",
        "parameters": [
          {
            "type": "string",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "description": "table to be added",
            "name": "table",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Table"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/table/{tableName}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single table",
        "tags": [
          "table"
        ],
        "summary": "Find a table from name",
        "operationId": "getTable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "table"
        ],
        "summary": "Deletes a table",
        "operationId": "deleteTable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to delete",
            "name": "tableName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/tables": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns the list of table names in the keyspace",
        "tags": [
          "table"
        ],
        "summary": "Lists all tables in a keyspace",
        "operationId": "getTables",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TableList"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/{tableName}/document": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a single entity",
        "tags": [
          "document"
        ],
        "summary": "Find a document from partition \u0026 clustering keys",
        "operationId": "getDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Primary key of entity to return",
            "name": "partitionKey",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Key of entity to return",
            "name": "clusteringKey",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "Updates a document in the store",
        "operationId": "updateDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated document",
            "name": "document",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "Add a new document",
        "operationId": "addDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to delete",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Document to be added",
            "name": "document",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EntityId"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "Deletes document",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Primary key of the document to delete",
            "name": "partitionKey",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Key of the documeent to delete",
            "name": "clusteringKey",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "Which owner does the document belong to ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/{tableName}/index": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "index"
        ],
        "summary": "Add a new table index (@see: https://docs.scylladb.com/getting-started/secondary_indexes)",
        "operationId": "addIndex",
        "parameters": [
          {
            "type": "string",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "description of the index to create",
            "name": "index",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Index"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "index"
        ],
        "summary": "Delete a table index (@see: https://docs.scylladb.com/getting-started/secondary_indexes)",
        "operationId": "deleteIndex",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "indexName",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/{keyspaceName}/{tableName}/query": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a list of enities or compact (array) data",
        "tags": [
          "query"
        ],
        "summary": "Retrieves custom columns for a group of entities",
        "operationId": "selectQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Query to define the selection",
            "name": "select",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SelectStatement"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "For which owner do we do the query ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SelectResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "query"
        ],
        "summary": "Deletes a selection of entities",
        "operationId": "deleteQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Name of keyspace to use",
            "name": "keyspaceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of table to return",
            "name": "tableName",
            "in": "path",
            "required": true
          },
          {
            "description": "Query to select the entities that will be deleted",
            "name": "delete",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteStatement"
            }
          },
          {
            "type": "string",
            "default": "",
            "description": "For which owner do we do the delete ? Defaults to current user. Indicate a group path to act as a group (e.g.: /youwol-users/subgroup)",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ClusteringOrder": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Order"
      }
    },
    "Column": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "primary_key": {
          "type": "boolean",
          "default": false
        },
        "static": {
          "type": "boolean",
          "default": false
        },
        "type": {
          "description": "Available values:\nCql_types: ascii, bigint, blob, boolean, counter, date, decimal, double, duration, float, inet, int, smallint, text, time, timestamp, timeuuid, tinyint, uuid, varchar, varint\nCollections: MAP\u003ccql_type,cql_type\u003e, SET\u003ccql_type\u003e, LIST\u003ccql_type\u003e\nTuples: TUPLE \u003ccql_type(,cql_type)*\u003e",
          "type": "string"
        }
      }
    },
    "ColumnUpdate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "description": "Available values:\nCql_types: ascii, bigint, blob, boolean, counter, date, decimal, double, duration, float, inet, int, smallint, text, time, timestamp, timeuuid, tinyint, uuid, varchar, varint\nCollections: MAP\u003ccql_type,cql_type\u003e, SET\u003ccql_type\u003e, LIST\u003ccql_type\u003e\nTuples: TUPLE \u003ccql_type(,cql_type)*\u003e",
          "type": "string"
        }
      }
    },
    "CompactionOptions": {
      "type": "object",
      "properties": {
        "bucket_high": {
          "description": "only for STCS, default 1.5",
          "type": "number"
        },
        "bucket_low": {
          "description": "only for STCS, default 0.5",
          "type": "number"
        },
        "class": {
          "type": "string",
          "default": "SizeTieredCompactionStrategy",
          "enum": [
            "SizeTieredCompactionStrategy",
            "TimeWindowCompactionStrategy",
            "LeveledCompactionStrategy"
          ]
        },
        "compaction_window_size": {
          "description": "only for TWCS, default 1",
          "type": "integer"
        },
        "compaction_window_unit": {
          "description": "only for TWCS, default DAYS",
          "type": "string",
          "enum": [
            "MINUTES",
            "HOURS",
            "DAYS"
          ]
        },
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "max_threshold": {
          "description": "only for STCS \u0026 TWCS, default 32",
          "type": "integer"
        },
        "min_sstable_size": {
          "description": "only for STCS, default 50",
          "type": "integer"
        },
        "min_threshold": {
          "description": "only for STCS \u0026 TWCS, default 4",
          "type": "integer"
        },
        "split_during_flush": {
          "description": "only for TWCS",
          "type": "boolean"
        },
        "sstable_size_in_mb": {
          "description": "only for LCS, default 160",
          "type": "integer"
        },
        "tombstone_compaction_interval": {
          "type": "integer",
          "default": 86400
        },
        "tombstone_threshold": {
          "type": "number",
          "default": 0.2
        }
      }
    },
    "CompressionOptions": {
      "type": "object",
      "properties": {
        "chunk_length_in_kb": {
          "type": "integer",
          "default": 4
        },
        "enabled": {
          "description": "DO NOT USE: https://github.com/scylladb/scylla/issues/2501",
          "type": "boolean",
          "default": true
        },
        "sstable_compression": {
          "type": "string",
          "default": "LZ4Compressor"
        }
      }
    },
    "DeleteStatement": {
      "description": "DELETE query description. @see: https://docs.scylladb.com/getting-started/dml/#delete-statement",
      "type": "object",
      "properties": {
        "condition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRelation"
          }
        },
        "simple_selection": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "where_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRelation"
          }
        }
      }
    },
    "Document": {
      "type": "object"
    },
    "EntityId": {
      "description": "The entity ID is the primary key of a document (combination of all primary columns values)",
      "type": "object"
    },
    "Index": {
      "description": "Decription of a table index entry",
      "type": "object",
      "required": [
        "name",
        "identifier"
      ],
      "properties": {
        "identifier": {
          "$ref": "#/definitions/IndexIdentifier"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "IndexIdentifier": {
      "description": "Decription of a table index identifier. If using a partition key, this will refer to a local secondary index, else it will be a global secondary index",
      "type": "object",
      "required": [
        "column_name"
      ],
      "properties": {
        "column_name": {
          "type": "string"
        },
        "option": {
          "type": "string",
          "default": "",
          "enum": [
            "",
            "keys",
            "values",
            "entries",
            "full"
          ]
        },
        "partition_key": {
          "type": "string"
        }
      }
    },
    "Keyspace": {
      "type": "object",
      "required": [
        "name",
        "replication"
      ],
      "properties": {
        "durable_writes": {
          "description": "Whether to use the commit log for updates on this keyspace (disable this option at your own risk!).",
          "type": "boolean",
          "default": true
        },
        "name": {
          "type": "string"
        },
        "replication": {
          "$ref": "#/definitions/Replication"
        }
      }
    },
    "KeyspaceList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "name",
        "order"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "order": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "Owner": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "for internal use only",
          "type": "string"
        },
        "kind": {
          "description": "for internal use only",
          "type": "string",
          "default": "user",
          "enum": [
            "user",
            "group"
          ]
        },
        "name": {
          "description": "group path",
          "type": "string"
        }
      }
    },
    "Principal": {
      "type": "object",
      "required": [
        "sub"
      ],
      "properties": {
        "address": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean"
        },
        "member_of": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "preferred_username": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      }
    },
    "Query": {
      "type": "object",
      "properties": {
        "ordering_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "where_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRelation"
          }
        }
      }
    },
    "QueryRelation": {
      "type": "object",
      "required": [
        "column",
        "relation",
        "term"
      ],
      "properties": {
        "column": {
          "type": "string"
        },
        "relation": {
          "$ref": "#/definitions/RelationOperator"
        },
        "term": {
          "type": "object"
        }
      }
    },
    "RelationOperator": {
      "type": "string",
      "enum": [
        "eq",
        "lt",
        "leq",
        "gt",
        "geq",
        "in",
        "cnt",
        "cntKey",
        "like"
      ]
    },
    "Replication": {
      "type": "object",
      "required": [
        "class"
      ],
      "properties": {
        "class": {
          "type": "string",
          "default": "SimpleStrategy",
          "enum": [
            "SimpleStrategy",
            "NetworkTopologyStrategy"
          ]
        },
        "replication_factor": {
          "type": "integer",
          "default": 3
        }
      }
    },
    "SelectClause": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        }
      }
    },
    "SelectResponse": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "object"
        },
        "documents": {
          "type": "object"
        },
        "iterator": {
          "type": "string"
        }
      }
    },
    "SelectStatement": {
      "description": "SELECT query description. @see: https://docs.scylladb.com/getting-started/dml/#select-statement",
      "type": "object",
      "required": [
        "max_results"
      ],
      "properties": {
        "allow_filtering": {
          "type": "boolean",
          "default": false
        },
        "distinct": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iterator": {
          "type": "string"
        },
        "max_results": {
          "type": "integer",
          "default": 100,
          "maximum": 1000,
          "minimum": 1
        },
        "mode": {
          "description": "Returns either a list of documents, or a list of arrays (one array per column)",
          "type": "string",
          "default": "documents",
          "enum": [
            "documents",
            "columns"
          ]
        },
        "query": {
          "$ref": "#/definitions/Query"
        },
        "select_clause": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectClause"
          }
        }
      }
    },
    "Table": {
      "type": "object",
      "required": [
        "name",
        "columns",
        "partition_key"
      ],
      "properties": {
        "clustering_columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          }
        },
        "name": {
          "type": "string",
          "example": "entities"
        },
        "partition_key": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "table_options": {
          "$ref": "#/definitions/TableOptions"
        }
      }
    },
    "TableList": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "TableOptions": {
      "description": "@see https://docs.scylladb.com/getting-started/ddl/#create-table-statement",
      "type": "object",
      "properties": {
        "bloom_filter_fp_chance": {
          "type": "number",
          "default": 0.00075
        },
        "clustering_order": {
          "$ref": "#/definitions/ClusteringOrder"
        },
        "comment": {
          "type": "string",
          "default": ""
        },
        "compaction": {
          "$ref": "#/definitions/CompactionOptions"
        },
        "compression": {
          "$ref": "#/definitions/CompressionOptions"
        },
        "dclocal_read_repair_chance": {
          "type": "number",
          "default": 0.1
        },
        "default_time_to_live": {
          "type": "integer",
          "default": 0
        },
        "gc_grace_seconds": {
          "type": "integer",
          "default": 864000
        },
        "memtable_flush_period_in_ms": {
          "type": "integer",
          "default": 0
        },
        "read_repair_chance": {
          "type": "integer",
          "default": 0
        },
        "speculative_retry": {
          "description": "@see https://docs.scylladb.com/getting-started/ddl/#speculative-retry-options",
          "type": "string",
          "default": "99PERCENTILE"
        }
      }
    },
    "TableUpdate": {
      "type": "object",
      "maxProperties": 2,
      "required": [
        "name"
      ],
      "properties": {
        "add_columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColumnUpdate"
          }
        },
        "drop_columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "example": "entities"
        },
        "table_options": {
          "$ref": "#/definitions/TableOptions"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Keyspace provides isolation between tables and contexts",
      "name": "keyspace"
    },
    {
      "description": "Basic description of a storage structure",
      "name": "table"
    },
    {
      "description": "Generic item storage",
      "name": "document"
    },
    {
      "description": "Retrieve or delete a group of documents per criteria",
      "name": "query"
    }
  ]
}`))
}
