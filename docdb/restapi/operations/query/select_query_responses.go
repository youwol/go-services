// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// SelectQueryOKCode is the HTTP code returned for type SelectQueryOK
const SelectQueryOKCode int = 200

/*SelectQueryOK successful operation

swagger:response selectQueryOK
*/
type SelectQueryOK struct {

	/*
	  In: Body
	*/
	Payload *models.SelectResponse `json:"body,omitempty"`
}

// NewSelectQueryOK creates SelectQueryOK with default headers values
func NewSelectQueryOK() *SelectQueryOK {

	return &SelectQueryOK{}
}

// WithPayload adds the payload to the select query o k response
func (o *SelectQueryOK) WithPayload(payload *models.SelectResponse) *SelectQueryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select query o k response
func (o *SelectQueryOK) SetPayload(payload *models.SelectResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectQueryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SelectQueryBadRequestCode is the HTTP code returned for type SelectQueryBadRequest
const SelectQueryBadRequestCode int = 400

/*SelectQueryBadRequest Bad request

swagger:response selectQueryBadRequest
*/
type SelectQueryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewSelectQueryBadRequest creates SelectQueryBadRequest with default headers values
func NewSelectQueryBadRequest() *SelectQueryBadRequest {

	return &SelectQueryBadRequest{}
}

// WithPayload adds the payload to the select query bad request response
func (o *SelectQueryBadRequest) WithPayload(payload *models.APIResponse) *SelectQueryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select query bad request response
func (o *SelectQueryBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectQueryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SelectQueryUnauthorizedCode is the HTTP code returned for type SelectQueryUnauthorized
const SelectQueryUnauthorizedCode int = 401

/*SelectQueryUnauthorized Unauthorized

swagger:response selectQueryUnauthorized
*/
type SelectQueryUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewSelectQueryUnauthorized creates SelectQueryUnauthorized with default headers values
func NewSelectQueryUnauthorized() *SelectQueryUnauthorized {

	return &SelectQueryUnauthorized{}
}

// WithPayload adds the payload to the select query unauthorized response
func (o *SelectQueryUnauthorized) WithPayload(payload *models.APIResponse) *SelectQueryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select query unauthorized response
func (o *SelectQueryUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectQueryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SelectQueryNotFoundCode is the HTTP code returned for type SelectQueryNotFound
const SelectQueryNotFoundCode int = 404

/*SelectQueryNotFound Not found

swagger:response selectQueryNotFound
*/
type SelectQueryNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewSelectQueryNotFound creates SelectQueryNotFound with default headers values
func NewSelectQueryNotFound() *SelectQueryNotFound {

	return &SelectQueryNotFound{}
}

// WithPayload adds the payload to the select query not found response
func (o *SelectQueryNotFound) WithPayload(payload *models.APIResponse) *SelectQueryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select query not found response
func (o *SelectQueryNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectQueryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SelectQueryInternalServerErrorCode is the HTTP code returned for type SelectQueryInternalServerError
const SelectQueryInternalServerErrorCode int = 500

/*SelectQueryInternalServerError Internal error

swagger:response selectQueryInternalServerError
*/
type SelectQueryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewSelectQueryInternalServerError creates SelectQueryInternalServerError with default headers values
func NewSelectQueryInternalServerError() *SelectQueryInternalServerError {

	return &SelectQueryInternalServerError{}
}

// WithPayload adds the payload to the select query internal server error response
func (o *SelectQueryInternalServerError) WithPayload(payload *models.APIResponse) *SelectQueryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the select query internal server error response
func (o *SelectQueryInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SelectQueryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
