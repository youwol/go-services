// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// GetTablesOKCode is the HTTP code returned for type GetTablesOK
const GetTablesOKCode int = 200

/*GetTablesOK successful operation

swagger:response getTablesOK
*/
type GetTablesOK struct {

	/*
	  In: Body
	*/
	Payload models.TableList `json:"body,omitempty"`
}

// NewGetTablesOK creates GetTablesOK with default headers values
func NewGetTablesOK() *GetTablesOK {

	return &GetTablesOK{}
}

// WithPayload adds the payload to the get tables o k response
func (o *GetTablesOK) WithPayload(payload models.TableList) *GetTablesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tables o k response
func (o *GetTablesOK) SetPayload(payload models.TableList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTablesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TableList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetTablesBadRequestCode is the HTTP code returned for type GetTablesBadRequest
const GetTablesBadRequestCode int = 400

/*GetTablesBadRequest Bad request

swagger:response getTablesBadRequest
*/
type GetTablesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetTablesBadRequest creates GetTablesBadRequest with default headers values
func NewGetTablesBadRequest() *GetTablesBadRequest {

	return &GetTablesBadRequest{}
}

// WithPayload adds the payload to the get tables bad request response
func (o *GetTablesBadRequest) WithPayload(payload *models.APIResponse) *GetTablesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tables bad request response
func (o *GetTablesBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTablesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTablesUnauthorizedCode is the HTTP code returned for type GetTablesUnauthorized
const GetTablesUnauthorizedCode int = 401

/*GetTablesUnauthorized Unauthorized

swagger:response getTablesUnauthorized
*/
type GetTablesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetTablesUnauthorized creates GetTablesUnauthorized with default headers values
func NewGetTablesUnauthorized() *GetTablesUnauthorized {

	return &GetTablesUnauthorized{}
}

// WithPayload adds the payload to the get tables unauthorized response
func (o *GetTablesUnauthorized) WithPayload(payload *models.APIResponse) *GetTablesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tables unauthorized response
func (o *GetTablesUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTablesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTablesNotFoundCode is the HTTP code returned for type GetTablesNotFound
const GetTablesNotFoundCode int = 404

/*GetTablesNotFound Not found

swagger:response getTablesNotFound
*/
type GetTablesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetTablesNotFound creates GetTablesNotFound with default headers values
func NewGetTablesNotFound() *GetTablesNotFound {

	return &GetTablesNotFound{}
}

// WithPayload adds the payload to the get tables not found response
func (o *GetTablesNotFound) WithPayload(payload *models.APIResponse) *GetTablesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tables not found response
func (o *GetTablesNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTablesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTablesInternalServerErrorCode is the HTTP code returned for type GetTablesInternalServerError
const GetTablesInternalServerErrorCode int = 500

/*GetTablesInternalServerError Internal error

swagger:response getTablesInternalServerError
*/
type GetTablesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetTablesInternalServerError creates GetTablesInternalServerError with default headers values
func NewGetTablesInternalServerError() *GetTablesInternalServerError {

	return &GetTablesInternalServerError{}
}

// WithPayload adds the payload to the get tables internal server error response
func (o *GetTablesInternalServerError) WithPayload(payload *models.APIResponse) *GetTablesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tables internal server error response
func (o *GetTablesInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTablesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
