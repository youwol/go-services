// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// UpdateTableOKCode is the HTTP code returned for type UpdateTableOK
const UpdateTableOKCode int = 200

/*UpdateTableOK Ok

swagger:response updateTableOK
*/
type UpdateTableOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTableOK creates UpdateTableOK with default headers values
func NewUpdateTableOK() *UpdateTableOK {

	return &UpdateTableOK{}
}

// WithPayload adds the payload to the update table o k response
func (o *UpdateTableOK) WithPayload(payload *models.APIResponse) *UpdateTableOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update table o k response
func (o *UpdateTableOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTableOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTableBadRequestCode is the HTTP code returned for type UpdateTableBadRequest
const UpdateTableBadRequestCode int = 400

/*UpdateTableBadRequest Bad request

swagger:response updateTableBadRequest
*/
type UpdateTableBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTableBadRequest creates UpdateTableBadRequest with default headers values
func NewUpdateTableBadRequest() *UpdateTableBadRequest {

	return &UpdateTableBadRequest{}
}

// WithPayload adds the payload to the update table bad request response
func (o *UpdateTableBadRequest) WithPayload(payload *models.APIResponse) *UpdateTableBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update table bad request response
func (o *UpdateTableBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTableBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTableUnauthorizedCode is the HTTP code returned for type UpdateTableUnauthorized
const UpdateTableUnauthorizedCode int = 401

/*UpdateTableUnauthorized Unauthorized

swagger:response updateTableUnauthorized
*/
type UpdateTableUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTableUnauthorized creates UpdateTableUnauthorized with default headers values
func NewUpdateTableUnauthorized() *UpdateTableUnauthorized {

	return &UpdateTableUnauthorized{}
}

// WithPayload adds the payload to the update table unauthorized response
func (o *UpdateTableUnauthorized) WithPayload(payload *models.APIResponse) *UpdateTableUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update table unauthorized response
func (o *UpdateTableUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTableUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTableNotFoundCode is the HTTP code returned for type UpdateTableNotFound
const UpdateTableNotFoundCode int = 404

/*UpdateTableNotFound Not found

swagger:response updateTableNotFound
*/
type UpdateTableNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTableNotFound creates UpdateTableNotFound with default headers values
func NewUpdateTableNotFound() *UpdateTableNotFound {

	return &UpdateTableNotFound{}
}

// WithPayload adds the payload to the update table not found response
func (o *UpdateTableNotFound) WithPayload(payload *models.APIResponse) *UpdateTableNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update table not found response
func (o *UpdateTableNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTableNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTableInternalServerErrorCode is the HTTP code returned for type UpdateTableInternalServerError
const UpdateTableInternalServerErrorCode int = 500

/*UpdateTableInternalServerError Internal error

swagger:response updateTableInternalServerError
*/
type UpdateTableInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTableInternalServerError creates UpdateTableInternalServerError with default headers values
func NewUpdateTableInternalServerError() *UpdateTableInternalServerError {

	return &UpdateTableInternalServerError{}
}

// WithPayload adds the payload to the update table internal server error response
func (o *UpdateTableInternalServerError) WithPayload(payload *models.APIResponse) *UpdateTableInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update table internal server error response
func (o *UpdateTableInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTableInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
