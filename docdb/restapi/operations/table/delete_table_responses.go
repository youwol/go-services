// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// DeleteTableOKCode is the HTTP code returned for type DeleteTableOK
const DeleteTableOKCode int = 200

/*DeleteTableOK Ok

swagger:response deleteTableOK
*/
type DeleteTableOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteTableOK creates DeleteTableOK with default headers values
func NewDeleteTableOK() *DeleteTableOK {

	return &DeleteTableOK{}
}

// WithPayload adds the payload to the delete table o k response
func (o *DeleteTableOK) WithPayload(payload *models.APIResponse) *DeleteTableOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete table o k response
func (o *DeleteTableOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTableOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTableBadRequestCode is the HTTP code returned for type DeleteTableBadRequest
const DeleteTableBadRequestCode int = 400

/*DeleteTableBadRequest Bad request

swagger:response deleteTableBadRequest
*/
type DeleteTableBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteTableBadRequest creates DeleteTableBadRequest with default headers values
func NewDeleteTableBadRequest() *DeleteTableBadRequest {

	return &DeleteTableBadRequest{}
}

// WithPayload adds the payload to the delete table bad request response
func (o *DeleteTableBadRequest) WithPayload(payload *models.APIResponse) *DeleteTableBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete table bad request response
func (o *DeleteTableBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTableBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTableUnauthorizedCode is the HTTP code returned for type DeleteTableUnauthorized
const DeleteTableUnauthorizedCode int = 401

/*DeleteTableUnauthorized Unauthorized

swagger:response deleteTableUnauthorized
*/
type DeleteTableUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteTableUnauthorized creates DeleteTableUnauthorized with default headers values
func NewDeleteTableUnauthorized() *DeleteTableUnauthorized {

	return &DeleteTableUnauthorized{}
}

// WithPayload adds the payload to the delete table unauthorized response
func (o *DeleteTableUnauthorized) WithPayload(payload *models.APIResponse) *DeleteTableUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete table unauthorized response
func (o *DeleteTableUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTableUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTableNotFoundCode is the HTTP code returned for type DeleteTableNotFound
const DeleteTableNotFoundCode int = 404

/*DeleteTableNotFound Not found

swagger:response deleteTableNotFound
*/
type DeleteTableNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteTableNotFound creates DeleteTableNotFound with default headers values
func NewDeleteTableNotFound() *DeleteTableNotFound {

	return &DeleteTableNotFound{}
}

// WithPayload adds the payload to the delete table not found response
func (o *DeleteTableNotFound) WithPayload(payload *models.APIResponse) *DeleteTableNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete table not found response
func (o *DeleteTableNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTableNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTableInternalServerErrorCode is the HTTP code returned for type DeleteTableInternalServerError
const DeleteTableInternalServerErrorCode int = 500

/*DeleteTableInternalServerError Internal error

swagger:response deleteTableInternalServerError
*/
type DeleteTableInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteTableInternalServerError creates DeleteTableInternalServerError with default headers values
func NewDeleteTableInternalServerError() *DeleteTableInternalServerError {

	return &DeleteTableInternalServerError{}
}

// WithPayload adds the payload to the delete table internal server error response
func (o *DeleteTableInternalServerError) WithPayload(payload *models.APIResponse) *DeleteTableInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete table internal server error response
func (o *DeleteTableInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTableInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
