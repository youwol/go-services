// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"platform/services/docdb/models"
	"platform/services/docdb/restapi/operations/document"
	"platform/services/docdb/restapi/operations/index"
	"platform/services/docdb/restapi/operations/keyspace"
	"platform/services/docdb/restapi/operations/query"
	"platform/services/docdb/restapi/operations/table"
)

// NewDocdbAPI creates a new Docdb instance
func NewDocdbAPI(spec *loads.Document) *DocdbAPI {
	return &DocdbAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		DocumentAddDocumentHandler: document.AddDocumentHandlerFunc(func(params document.AddDocumentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation document.AddDocument has not yet been implemented")
		}),
		IndexAddIndexHandler: index.AddIndexHandlerFunc(func(params index.AddIndexParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation index.AddIndex has not yet been implemented")
		}),
		KeyspaceAddKeyspaceHandler: keyspace.AddKeyspaceHandlerFunc(func(params keyspace.AddKeyspaceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation keyspace.AddKeyspace has not yet been implemented")
		}),
		TableAddTableHandler: table.AddTableHandlerFunc(func(params table.AddTableParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation table.AddTable has not yet been implemented")
		}),
		DocumentDeleteDocumentHandler: document.DeleteDocumentHandlerFunc(func(params document.DeleteDocumentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation document.DeleteDocument has not yet been implemented")
		}),
		IndexDeleteIndexHandler: index.DeleteIndexHandlerFunc(func(params index.DeleteIndexParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation index.DeleteIndex has not yet been implemented")
		}),
		KeyspaceDeleteKeyspaceHandler: keyspace.DeleteKeyspaceHandlerFunc(func(params keyspace.DeleteKeyspaceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation keyspace.DeleteKeyspace has not yet been implemented")
		}),
		QueryDeleteQueryHandler: query.DeleteQueryHandlerFunc(func(params query.DeleteQueryParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation query.DeleteQuery has not yet been implemented")
		}),
		TableDeleteTableHandler: table.DeleteTableHandlerFunc(func(params table.DeleteTableParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation table.DeleteTable has not yet been implemented")
		}),
		DocumentGetDocumentHandler: document.GetDocumentHandlerFunc(func(params document.GetDocumentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation document.GetDocument has not yet been implemented")
		}),
		KeyspaceGetKeyspaceHandler: keyspace.GetKeyspaceHandlerFunc(func(params keyspace.GetKeyspaceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation keyspace.GetKeyspace has not yet been implemented")
		}),
		KeyspaceGetKeyspacesHandler: keyspace.GetKeyspacesHandlerFunc(func(params keyspace.GetKeyspacesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation keyspace.GetKeyspaces has not yet been implemented")
		}),
		TableGetTableHandler: table.GetTableHandlerFunc(func(params table.GetTableParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation table.GetTable has not yet been implemented")
		}),
		TableGetTablesHandler: table.GetTablesHandlerFunc(func(params table.GetTablesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation table.GetTables has not yet been implemented")
		}),
		QuerySelectQueryHandler: query.SelectQueryHandlerFunc(func(params query.SelectQueryParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation query.SelectQuery has not yet been implemented")
		}),
		DocumentUpdateDocumentHandler: document.UpdateDocumentHandlerFunc(func(params document.UpdateDocumentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation document.UpdateDocument has not yet been implemented")
		}),
		KeyspaceUpdateKeyspaceHandler: keyspace.UpdateKeyspaceHandlerFunc(func(params keyspace.UpdateKeyspaceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation keyspace.UpdateKeyspace has not yet been implemented")
		}),
		TableUpdateTableHandler: table.UpdateTableHandlerFunc(func(params table.UpdateTableParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation table.UpdateTable has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (*models.Principal, error) {
			return nil, errors.NotImplemented("api key auth (Bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*DocdbAPI the docdb API */
type DocdbAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DocumentAddDocumentHandler sets the operation handler for the add document operation
	DocumentAddDocumentHandler document.AddDocumentHandler
	// IndexAddIndexHandler sets the operation handler for the add index operation
	IndexAddIndexHandler index.AddIndexHandler
	// KeyspaceAddKeyspaceHandler sets the operation handler for the add keyspace operation
	KeyspaceAddKeyspaceHandler keyspace.AddKeyspaceHandler
	// TableAddTableHandler sets the operation handler for the add table operation
	TableAddTableHandler table.AddTableHandler
	// DocumentDeleteDocumentHandler sets the operation handler for the delete document operation
	DocumentDeleteDocumentHandler document.DeleteDocumentHandler
	// IndexDeleteIndexHandler sets the operation handler for the delete index operation
	IndexDeleteIndexHandler index.DeleteIndexHandler
	// KeyspaceDeleteKeyspaceHandler sets the operation handler for the delete keyspace operation
	KeyspaceDeleteKeyspaceHandler keyspace.DeleteKeyspaceHandler
	// QueryDeleteQueryHandler sets the operation handler for the delete query operation
	QueryDeleteQueryHandler query.DeleteQueryHandler
	// TableDeleteTableHandler sets the operation handler for the delete table operation
	TableDeleteTableHandler table.DeleteTableHandler
	// DocumentGetDocumentHandler sets the operation handler for the get document operation
	DocumentGetDocumentHandler document.GetDocumentHandler
	// KeyspaceGetKeyspaceHandler sets the operation handler for the get keyspace operation
	KeyspaceGetKeyspaceHandler keyspace.GetKeyspaceHandler
	// KeyspaceGetKeyspacesHandler sets the operation handler for the get keyspaces operation
	KeyspaceGetKeyspacesHandler keyspace.GetKeyspacesHandler
	// TableGetTableHandler sets the operation handler for the get table operation
	TableGetTableHandler table.GetTableHandler
	// TableGetTablesHandler sets the operation handler for the get tables operation
	TableGetTablesHandler table.GetTablesHandler
	// QuerySelectQueryHandler sets the operation handler for the select query operation
	QuerySelectQueryHandler query.SelectQueryHandler
	// DocumentUpdateDocumentHandler sets the operation handler for the update document operation
	DocumentUpdateDocumentHandler document.UpdateDocumentHandler
	// KeyspaceUpdateKeyspaceHandler sets the operation handler for the update keyspace operation
	KeyspaceUpdateKeyspaceHandler keyspace.UpdateKeyspaceHandler
	// TableUpdateTableHandler sets the operation handler for the update table operation
	TableUpdateTableHandler table.UpdateTableHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DocdbAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DocdbAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DocdbAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DocdbAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DocdbAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DocdbAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DocdbAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DocdbAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DocdbAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DocdbAPI
func (o *DocdbAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.DocumentAddDocumentHandler == nil {
		unregistered = append(unregistered, "document.AddDocumentHandler")
	}
	if o.IndexAddIndexHandler == nil {
		unregistered = append(unregistered, "index.AddIndexHandler")
	}
	if o.KeyspaceAddKeyspaceHandler == nil {
		unregistered = append(unregistered, "keyspace.AddKeyspaceHandler")
	}
	if o.TableAddTableHandler == nil {
		unregistered = append(unregistered, "table.AddTableHandler")
	}
	if o.DocumentDeleteDocumentHandler == nil {
		unregistered = append(unregistered, "document.DeleteDocumentHandler")
	}
	if o.IndexDeleteIndexHandler == nil {
		unregistered = append(unregistered, "index.DeleteIndexHandler")
	}
	if o.KeyspaceDeleteKeyspaceHandler == nil {
		unregistered = append(unregistered, "keyspace.DeleteKeyspaceHandler")
	}
	if o.QueryDeleteQueryHandler == nil {
		unregistered = append(unregistered, "query.DeleteQueryHandler")
	}
	if o.TableDeleteTableHandler == nil {
		unregistered = append(unregistered, "table.DeleteTableHandler")
	}
	if o.DocumentGetDocumentHandler == nil {
		unregistered = append(unregistered, "document.GetDocumentHandler")
	}
	if o.KeyspaceGetKeyspaceHandler == nil {
		unregistered = append(unregistered, "keyspace.GetKeyspaceHandler")
	}
	if o.KeyspaceGetKeyspacesHandler == nil {
		unregistered = append(unregistered, "keyspace.GetKeyspacesHandler")
	}
	if o.TableGetTableHandler == nil {
		unregistered = append(unregistered, "table.GetTableHandler")
	}
	if o.TableGetTablesHandler == nil {
		unregistered = append(unregistered, "table.GetTablesHandler")
	}
	if o.QuerySelectQueryHandler == nil {
		unregistered = append(unregistered, "query.SelectQueryHandler")
	}
	if o.DocumentUpdateDocumentHandler == nil {
		unregistered = append(unregistered, "document.UpdateDocumentHandler")
	}
	if o.KeyspaceUpdateKeyspaceHandler == nil {
		unregistered = append(unregistered, "keyspace.UpdateKeyspaceHandler")
	}
	if o.TableUpdateTableHandler == nil {
		unregistered = append(unregistered, "table.UpdateTableHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DocdbAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DocdbAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.BearerAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *DocdbAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DocdbAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DocdbAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DocdbAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the docdb API
func (o *DocdbAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DocdbAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{keyspaceName}/{tableName}/document"] = document.NewAddDocument(o.context, o.DocumentAddDocumentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{keyspaceName}/{tableName}/index"] = index.NewAddIndex(o.context, o.IndexAddIndexHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/keyspace"] = keyspace.NewAddKeyspace(o.context, o.KeyspaceAddKeyspaceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{keyspaceName}/table"] = table.NewAddTable(o.context, o.TableAddTableHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/{keyspaceName}/{tableName}/document"] = document.NewDeleteDocument(o.context, o.DocumentDeleteDocumentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/{keyspaceName}/{tableName}/index"] = index.NewDeleteIndex(o.context, o.IndexDeleteIndexHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/keyspace/{keyspaceName}"] = keyspace.NewDeleteKeyspace(o.context, o.KeyspaceDeleteKeyspaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/{keyspaceName}/{tableName}/query"] = query.NewDeleteQuery(o.context, o.QueryDeleteQueryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/{keyspaceName}/table/{tableName}"] = table.NewDeleteTable(o.context, o.TableDeleteTableHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{keyspaceName}/{tableName}/document"] = document.NewGetDocument(o.context, o.DocumentGetDocumentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/keyspace/{keyspaceName}"] = keyspace.NewGetKeyspace(o.context, o.KeyspaceGetKeyspaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/keyspaces"] = keyspace.NewGetKeyspaces(o.context, o.KeyspaceGetKeyspacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{keyspaceName}/table/{tableName}"] = table.NewGetTable(o.context, o.TableGetTableHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{keyspaceName}/tables"] = table.NewGetTables(o.context, o.TableGetTablesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{keyspaceName}/{tableName}/query"] = query.NewSelectQuery(o.context, o.QuerySelectQueryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/{keyspaceName}/{tableName}/document"] = document.NewUpdateDocument(o.context, o.DocumentUpdateDocumentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/keyspace"] = keyspace.NewUpdateKeyspace(o.context, o.KeyspaceUpdateKeyspaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/{keyspaceName}/table"] = table.NewUpdateTable(o.context, o.TableUpdateTableHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DocdbAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DocdbAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DocdbAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DocdbAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DocdbAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
