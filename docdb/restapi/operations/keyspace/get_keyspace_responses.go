// Code generated by go-swagger; DO NOT EDIT.

package keyspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// GetKeyspaceOKCode is the HTTP code returned for type GetKeyspaceOK
const GetKeyspaceOKCode int = 200

/*GetKeyspaceOK Ok

swagger:response getKeyspaceOK
*/
type GetKeyspaceOK struct {

	/*
	  In: Body
	*/
	Payload *models.Keyspace `json:"body,omitempty"`
}

// NewGetKeyspaceOK creates GetKeyspaceOK with default headers values
func NewGetKeyspaceOK() *GetKeyspaceOK {

	return &GetKeyspaceOK{}
}

// WithPayload adds the payload to the get keyspace o k response
func (o *GetKeyspaceOK) WithPayload(payload *models.Keyspace) *GetKeyspaceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get keyspace o k response
func (o *GetKeyspaceOK) SetPayload(payload *models.Keyspace) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetKeyspaceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetKeyspaceBadRequestCode is the HTTP code returned for type GetKeyspaceBadRequest
const GetKeyspaceBadRequestCode int = 400

/*GetKeyspaceBadRequest Bad request

swagger:response getKeyspaceBadRequest
*/
type GetKeyspaceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetKeyspaceBadRequest creates GetKeyspaceBadRequest with default headers values
func NewGetKeyspaceBadRequest() *GetKeyspaceBadRequest {

	return &GetKeyspaceBadRequest{}
}

// WithPayload adds the payload to the get keyspace bad request response
func (o *GetKeyspaceBadRequest) WithPayload(payload *models.APIResponse) *GetKeyspaceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get keyspace bad request response
func (o *GetKeyspaceBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetKeyspaceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetKeyspaceUnauthorizedCode is the HTTP code returned for type GetKeyspaceUnauthorized
const GetKeyspaceUnauthorizedCode int = 401

/*GetKeyspaceUnauthorized Unauthorized

swagger:response getKeyspaceUnauthorized
*/
type GetKeyspaceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetKeyspaceUnauthorized creates GetKeyspaceUnauthorized with default headers values
func NewGetKeyspaceUnauthorized() *GetKeyspaceUnauthorized {

	return &GetKeyspaceUnauthorized{}
}

// WithPayload adds the payload to the get keyspace unauthorized response
func (o *GetKeyspaceUnauthorized) WithPayload(payload *models.APIResponse) *GetKeyspaceUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get keyspace unauthorized response
func (o *GetKeyspaceUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetKeyspaceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetKeyspaceNotFoundCode is the HTTP code returned for type GetKeyspaceNotFound
const GetKeyspaceNotFoundCode int = 404

/*GetKeyspaceNotFound Not found

swagger:response getKeyspaceNotFound
*/
type GetKeyspaceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetKeyspaceNotFound creates GetKeyspaceNotFound with default headers values
func NewGetKeyspaceNotFound() *GetKeyspaceNotFound {

	return &GetKeyspaceNotFound{}
}

// WithPayload adds the payload to the get keyspace not found response
func (o *GetKeyspaceNotFound) WithPayload(payload *models.APIResponse) *GetKeyspaceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get keyspace not found response
func (o *GetKeyspaceNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetKeyspaceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetKeyspaceInternalServerErrorCode is the HTTP code returned for type GetKeyspaceInternalServerError
const GetKeyspaceInternalServerErrorCode int = 500

/*GetKeyspaceInternalServerError Internal error

swagger:response getKeyspaceInternalServerError
*/
type GetKeyspaceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetKeyspaceInternalServerError creates GetKeyspaceInternalServerError with default headers values
func NewGetKeyspaceInternalServerError() *GetKeyspaceInternalServerError {

	return &GetKeyspaceInternalServerError{}
}

// WithPayload adds the payload to the get keyspace internal server error response
func (o *GetKeyspaceInternalServerError) WithPayload(payload *models.APIResponse) *GetKeyspaceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get keyspace internal server error response
func (o *GetKeyspaceInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetKeyspaceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
