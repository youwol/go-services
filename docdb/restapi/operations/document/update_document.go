// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"platform/services/docdb/models"
)

// UpdateDocumentHandlerFunc turns a function with the right signature into a update document handler
type UpdateDocumentHandlerFunc func(UpdateDocumentParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateDocumentHandlerFunc) Handle(params UpdateDocumentParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateDocumentHandler interface for that can handle valid update document params
type UpdateDocumentHandler interface {
	Handle(UpdateDocumentParams, *models.Principal) middleware.Responder
}

// NewUpdateDocument creates a new http.Handler for the update document operation
func NewUpdateDocument(ctx *middleware.Context, handler UpdateDocumentHandler) *UpdateDocument {
	return &UpdateDocument{Context: ctx, Handler: handler}
}

/*UpdateDocument swagger:route PUT /{keyspaceName}/{tableName}/document document updateDocument

Updates a document in the store

*/
type UpdateDocument struct {
	Context *middleware.Context
	Handler UpdateDocumentHandler
}

func (o *UpdateDocument) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateDocumentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
