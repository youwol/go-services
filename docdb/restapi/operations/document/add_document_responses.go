// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// AddDocumentCreatedCode is the HTTP code returned for type AddDocumentCreated
const AddDocumentCreatedCode int = 201

/*AddDocumentCreated Created

swagger:response addDocumentCreated
*/
type AddDocumentCreated struct {

	/*
	  In: Body
	*/
	Payload models.EntityID `json:"body,omitempty"`
}

// NewAddDocumentCreated creates AddDocumentCreated with default headers values
func NewAddDocumentCreated() *AddDocumentCreated {

	return &AddDocumentCreated{}
}

// WithPayload adds the payload to the add document created response
func (o *AddDocumentCreated) WithPayload(payload models.EntityID) *AddDocumentCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add document created response
func (o *AddDocumentCreated) SetPayload(payload models.EntityID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDocumentCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// AddDocumentBadRequestCode is the HTTP code returned for type AddDocumentBadRequest
const AddDocumentBadRequestCode int = 400

/*AddDocumentBadRequest Bad request

swagger:response addDocumentBadRequest
*/
type AddDocumentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddDocumentBadRequest creates AddDocumentBadRequest with default headers values
func NewAddDocumentBadRequest() *AddDocumentBadRequest {

	return &AddDocumentBadRequest{}
}

// WithPayload adds the payload to the add document bad request response
func (o *AddDocumentBadRequest) WithPayload(payload *models.APIResponse) *AddDocumentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add document bad request response
func (o *AddDocumentBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDocumentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddDocumentUnauthorizedCode is the HTTP code returned for type AddDocumentUnauthorized
const AddDocumentUnauthorizedCode int = 401

/*AddDocumentUnauthorized Unauthorized

swagger:response addDocumentUnauthorized
*/
type AddDocumentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddDocumentUnauthorized creates AddDocumentUnauthorized with default headers values
func NewAddDocumentUnauthorized() *AddDocumentUnauthorized {

	return &AddDocumentUnauthorized{}
}

// WithPayload adds the payload to the add document unauthorized response
func (o *AddDocumentUnauthorized) WithPayload(payload *models.APIResponse) *AddDocumentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add document unauthorized response
func (o *AddDocumentUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDocumentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddDocumentNotFoundCode is the HTTP code returned for type AddDocumentNotFound
const AddDocumentNotFoundCode int = 404

/*AddDocumentNotFound Not found

swagger:response addDocumentNotFound
*/
type AddDocumentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddDocumentNotFound creates AddDocumentNotFound with default headers values
func NewAddDocumentNotFound() *AddDocumentNotFound {

	return &AddDocumentNotFound{}
}

// WithPayload adds the payload to the add document not found response
func (o *AddDocumentNotFound) WithPayload(payload *models.APIResponse) *AddDocumentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add document not found response
func (o *AddDocumentNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDocumentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddDocumentInternalServerErrorCode is the HTTP code returned for type AddDocumentInternalServerError
const AddDocumentInternalServerErrorCode int = 500

/*AddDocumentInternalServerError Internal error

swagger:response addDocumentInternalServerError
*/
type AddDocumentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddDocumentInternalServerError creates AddDocumentInternalServerError with default headers values
func NewAddDocumentInternalServerError() *AddDocumentInternalServerError {

	return &AddDocumentInternalServerError{}
}

// WithPayload adds the payload to the add document internal server error response
func (o *AddDocumentInternalServerError) WithPayload(payload *models.APIResponse) *AddDocumentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add document internal server error response
func (o *AddDocumentInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDocumentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
