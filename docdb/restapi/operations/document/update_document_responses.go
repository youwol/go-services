// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"platform/services/docdb/models"
)

// UpdateDocumentOKCode is the HTTP code returned for type UpdateDocumentOK
const UpdateDocumentOKCode int = 200

/*UpdateDocumentOK Ok

swagger:response updateDocumentOK
*/
type UpdateDocumentOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateDocumentOK creates UpdateDocumentOK with default headers values
func NewUpdateDocumentOK() *UpdateDocumentOK {

	return &UpdateDocumentOK{}
}

// WithPayload adds the payload to the update document o k response
func (o *UpdateDocumentOK) WithPayload(payload *models.APIResponse) *UpdateDocumentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update document o k response
func (o *UpdateDocumentOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDocumentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateDocumentBadRequestCode is the HTTP code returned for type UpdateDocumentBadRequest
const UpdateDocumentBadRequestCode int = 400

/*UpdateDocumentBadRequest Bad request

swagger:response updateDocumentBadRequest
*/
type UpdateDocumentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateDocumentBadRequest creates UpdateDocumentBadRequest with default headers values
func NewUpdateDocumentBadRequest() *UpdateDocumentBadRequest {

	return &UpdateDocumentBadRequest{}
}

// WithPayload adds the payload to the update document bad request response
func (o *UpdateDocumentBadRequest) WithPayload(payload *models.APIResponse) *UpdateDocumentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update document bad request response
func (o *UpdateDocumentBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDocumentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateDocumentUnauthorizedCode is the HTTP code returned for type UpdateDocumentUnauthorized
const UpdateDocumentUnauthorizedCode int = 401

/*UpdateDocumentUnauthorized Unauthorized

swagger:response updateDocumentUnauthorized
*/
type UpdateDocumentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateDocumentUnauthorized creates UpdateDocumentUnauthorized with default headers values
func NewUpdateDocumentUnauthorized() *UpdateDocumentUnauthorized {

	return &UpdateDocumentUnauthorized{}
}

// WithPayload adds the payload to the update document unauthorized response
func (o *UpdateDocumentUnauthorized) WithPayload(payload *models.APIResponse) *UpdateDocumentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update document unauthorized response
func (o *UpdateDocumentUnauthorized) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDocumentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateDocumentNotFoundCode is the HTTP code returned for type UpdateDocumentNotFound
const UpdateDocumentNotFoundCode int = 404

/*UpdateDocumentNotFound Not found

swagger:response updateDocumentNotFound
*/
type UpdateDocumentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateDocumentNotFound creates UpdateDocumentNotFound with default headers values
func NewUpdateDocumentNotFound() *UpdateDocumentNotFound {

	return &UpdateDocumentNotFound{}
}

// WithPayload adds the payload to the update document not found response
func (o *UpdateDocumentNotFound) WithPayload(payload *models.APIResponse) *UpdateDocumentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update document not found response
func (o *UpdateDocumentNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDocumentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateDocumentInternalServerErrorCode is the HTTP code returned for type UpdateDocumentInternalServerError
const UpdateDocumentInternalServerErrorCode int = 500

/*UpdateDocumentInternalServerError Internal error

swagger:response updateDocumentInternalServerError
*/
type UpdateDocumentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateDocumentInternalServerError creates UpdateDocumentInternalServerError with default headers values
func NewUpdateDocumentInternalServerError() *UpdateDocumentInternalServerError {

	return &UpdateDocumentInternalServerError{}
}

// WithPayload adds the payload to the update document internal server error response
func (o *UpdateDocumentInternalServerError) WithPayload(payload *models.APIResponse) *UpdateDocumentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update document internal server error response
func (o *UpdateDocumentInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDocumentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
