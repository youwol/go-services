// Code generated by go-swagger; DO NOT EDIT.

package index

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"platform/services/docdb/models"
)

// AddIndexHandlerFunc turns a function with the right signature into a add index handler
type AddIndexHandlerFunc func(AddIndexParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AddIndexHandlerFunc) Handle(params AddIndexParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// AddIndexHandler interface for that can handle valid add index params
type AddIndexHandler interface {
	Handle(AddIndexParams, *models.Principal) middleware.Responder
}

// NewAddIndex creates a new http.Handler for the add index operation
func NewAddIndex(ctx *middleware.Context, handler AddIndexHandler) *AddIndex {
	return &AddIndex{Context: ctx, Handler: handler}
}

/*AddIndex swagger:route POST /{keyspaceName}/{tableName}/index index addIndex

Add a new table index (@see: https://docs.scylladb.com/getting-started/secondary_indexes)

*/
type AddIndex struct {
	Context *middleware.Context
	Handler AddIndexHandler
}

func (o *AddIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddIndexParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
