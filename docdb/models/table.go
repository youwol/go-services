// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Table table
//
// swagger:model Table
type Table struct {

	// clustering columns
	ClusteringColumns []string `json:"clustering_columns"`

	// columns
	// Required: true
	Columns []*Column `json:"columns"`

	// name
	// Required: true
	Name *string `json:"name"`

	// partition key
	// Required: true
	PartitionKey []string `json:"partition_key"`

	// table options
	TableOptions *TableOptions `json:"table_options,omitempty"`
}

// Validate validates this table
func (m *Table) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Table) validateColumns(formats strfmt.Registry) error {

	if err := validate.Required("columns", "body", m.Columns); err != nil {
		return err
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Table) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Table) validatePartitionKey(formats strfmt.Registry) error {

	if err := validate.Required("partition_key", "body", m.PartitionKey); err != nil {
		return err
	}

	return nil
}

func (m *Table) validateTableOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.TableOptions) { // not required
		return nil
	}

	if m.TableOptions != nil {
		if err := m.TableOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("table_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Table) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Table) UnmarshalBinary(b []byte) error {
	var res Table
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
