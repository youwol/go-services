// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompactionOptions compaction options
//
// swagger:model CompactionOptions
type CompactionOptions struct {

	// only for STCS, default 1.5
	BucketHigh float64 `json:"bucket_high,omitempty"`

	// only for STCS, default 0.5
	BucketLow float64 `json:"bucket_low,omitempty"`

	// class
	// Enum: [SizeTieredCompactionStrategy TimeWindowCompactionStrategy LeveledCompactionStrategy]
	Class *string `json:"class,omitempty"`

	// only for TWCS, default 1
	CompactionWindowSize int64 `json:"compaction_window_size,omitempty"`

	// only for TWCS, default DAYS
	// Enum: [MINUTES HOURS DAYS]
	CompactionWindowUnit string `json:"compaction_window_unit,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// only for STCS & TWCS, default 32
	MaxThreshold int64 `json:"max_threshold,omitempty"`

	// only for STCS, default 50
	MinSstableSize int64 `json:"min_sstable_size,omitempty"`

	// only for STCS & TWCS, default 4
	MinThreshold int64 `json:"min_threshold,omitempty"`

	// only for TWCS
	SplitDuringFlush bool `json:"split_during_flush,omitempty"`

	// only for LCS, default 160
	SstableSizeInMb int64 `json:"sstable_size_in_mb,omitempty"`

	// tombstone compaction interval
	TombstoneCompactionInterval *int64 `json:"tombstone_compaction_interval,omitempty"`

	// tombstone threshold
	TombstoneThreshold *float64 `json:"tombstone_threshold,omitempty"`
}

// Validate validates this compaction options
func (m *CompactionOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompactionWindowUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var compactionOptionsTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SizeTieredCompactionStrategy","TimeWindowCompactionStrategy","LeveledCompactionStrategy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		compactionOptionsTypeClassPropEnum = append(compactionOptionsTypeClassPropEnum, v)
	}
}

const (

	// CompactionOptionsClassSizeTieredCompactionStrategy captures enum value "SizeTieredCompactionStrategy"
	CompactionOptionsClassSizeTieredCompactionStrategy string = "SizeTieredCompactionStrategy"

	// CompactionOptionsClassTimeWindowCompactionStrategy captures enum value "TimeWindowCompactionStrategy"
	CompactionOptionsClassTimeWindowCompactionStrategy string = "TimeWindowCompactionStrategy"

	// CompactionOptionsClassLeveledCompactionStrategy captures enum value "LeveledCompactionStrategy"
	CompactionOptionsClassLeveledCompactionStrategy string = "LeveledCompactionStrategy"
)

// prop value enum
func (m *CompactionOptions) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, compactionOptionsTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CompactionOptions) validateClass(formats strfmt.Registry) error {

	if swag.IsZero(m.Class) { // not required
		return nil
	}

	// value enum
	if err := m.validateClassEnum("class", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

var compactionOptionsTypeCompactionWindowUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MINUTES","HOURS","DAYS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		compactionOptionsTypeCompactionWindowUnitPropEnum = append(compactionOptionsTypeCompactionWindowUnitPropEnum, v)
	}
}

const (

	// CompactionOptionsCompactionWindowUnitMINUTES captures enum value "MINUTES"
	CompactionOptionsCompactionWindowUnitMINUTES string = "MINUTES"

	// CompactionOptionsCompactionWindowUnitHOURS captures enum value "HOURS"
	CompactionOptionsCompactionWindowUnitHOURS string = "HOURS"

	// CompactionOptionsCompactionWindowUnitDAYS captures enum value "DAYS"
	CompactionOptionsCompactionWindowUnitDAYS string = "DAYS"
)

// prop value enum
func (m *CompactionOptions) validateCompactionWindowUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, compactionOptionsTypeCompactionWindowUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CompactionOptions) validateCompactionWindowUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CompactionWindowUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCompactionWindowUnitEnum("compaction_window_unit", "body", m.CompactionWindowUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompactionOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompactionOptions) UnmarshalBinary(b []byte) error {
	var res CompactionOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
