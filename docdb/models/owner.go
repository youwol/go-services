// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Owner owner
//
// swagger:model Owner
type Owner struct {

	// for internal use only
	ID string `json:"id,omitempty"`

	// for internal use only
	// Enum: [user group]
	Kind *string `json:"kind,omitempty"`

	// group path
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this owner
func (m *Owner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ownerTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ownerTypeKindPropEnum = append(ownerTypeKindPropEnum, v)
	}
}

const (

	// OwnerKindUser captures enum value "user"
	OwnerKindUser string = "user"

	// OwnerKindGroup captures enum value "group"
	OwnerKindGroup string = "group"
)

// prop value enum
func (m *Owner) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ownerTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Owner) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Owner) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Owner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Owner) UnmarshalBinary(b []byte) error {
	var res Owner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
