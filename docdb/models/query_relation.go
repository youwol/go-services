// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryRelation query relation
//
// swagger:model QueryRelation
type QueryRelation struct {

	// column
	// Required: true
	Column *string `json:"column"`

	// relation
	// Required: true
	Relation RelationOperator `json:"relation"`

	// term
	// Required: true
	Term interface{} `json:"term"`
}

// Validate validates this query relation
func (m *QueryRelation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelation(formats); err != nil {
		res = append(res, err)
	}

	// if err := m.validateTerm(formats); err != nil {
	// 	res = append(res, err)
	// }

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryRelation) validateColumn(formats strfmt.Registry) error {

	if err := validate.Required("column", "body", m.Column); err != nil {
		return err
	}

	return nil
}

func (m *QueryRelation) validateRelation(formats strfmt.Registry) error {

	if err := m.Relation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relation")
		}
		return err
	}

	return nil
}

func (m *QueryRelation) validateTerm(formats strfmt.Registry) error {

	if err := validate.Required("term", "body", m.Term); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryRelation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryRelation) UnmarshalBinary(b []byte) error {
	var res QueryRelation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
