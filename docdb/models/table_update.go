// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TableUpdate table update
//
// swagger:model TableUpdate
type TableUpdate struct {

	// add columns
	AddColumns []*ColumnUpdate `json:"add_columns"`

	// drop columns
	DropColumns []string `json:"drop_columns"`

	// name
	// Required: true
	Name *string `json:"name"`

	// table options
	TableOptions *TableOptions `json:"table_options,omitempty"`
}

// Validate validates this table update
func (m *TableUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableUpdate) validateAddColumns(formats strfmt.Registry) error {

	if swag.IsZero(m.AddColumns) { // not required
		return nil
	}

	for i := 0; i < len(m.AddColumns); i++ {
		if swag.IsZero(m.AddColumns[i]) { // not required
			continue
		}

		if m.AddColumns[i] != nil {
			if err := m.AddColumns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add_columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TableUpdate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TableUpdate) validateTableOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.TableOptions) { // not required
		return nil
	}

	if m.TableOptions != nil {
		if err := m.TableOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("table_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableUpdate) UnmarshalBinary(b []byte) error {
	var res TableUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
