// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Keyspace keyspace
//
// swagger:model Keyspace
type Keyspace struct {

	// Whether to use the commit log for updates on this keyspace (disable this option at your own risk!).
	DurableWrites *bool `json:"durable_writes,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replication
	// Required: true
	Replication *Replication `json:"replication"`
}

// Validate validates this keyspace
func (m *Keyspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Keyspace) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Keyspace) validateReplication(formats strfmt.Registry) error {

	if err := validate.Required("replication", "body", m.Replication); err != nil {
		return err
	}

	if m.Replication != nil {
		if err := m.Replication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Keyspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Keyspace) UnmarshalBinary(b []byte) error {
	var res Keyspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
