// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SelectStatement SELECT query description. @see: https://docs.scylladb.com/getting-started/dml/#select-statement
//
// swagger:model SelectStatement
type SelectStatement struct {

	// allow filtering
	AllowFiltering *bool `json:"allow_filtering,omitempty"`

	// distinct
	Distinct []string `json:"distinct"`

	// iterator
	Iterator string `json:"iterator,omitempty"`

	// max results
	// Required: true
	// Maximum: 1000
	// Minimum: 1
	MaxResults *int64 `json:"max_results"`

	// Returns either a list of documents, or a list of arrays (one array per column)
	// Enum: [documents columns]
	Mode *string `json:"mode,omitempty"`

	// query
	Query *Query `json:"query,omitempty"`

	// select clause
	SelectClause []*SelectClause `json:"select_clause"`
}

// Validate validates this select statement
func (m *SelectStatement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectClause(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectStatement) validateMaxResults(formats strfmt.Registry) error {

	if err := validate.Required("max_results", "body", m.MaxResults); err != nil {
		return err
	}

	if err := validate.MinimumInt("max_results", "body", int64(*m.MaxResults), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max_results", "body", int64(*m.MaxResults), 1000, false); err != nil {
		return err
	}

	return nil
}

var selectStatementTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["documents","columns"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		selectStatementTypeModePropEnum = append(selectStatementTypeModePropEnum, v)
	}
}

const (

	// SelectStatementModeDocuments captures enum value "documents"
	SelectStatementModeDocuments string = "documents"

	// SelectStatementModeColumns captures enum value "columns"
	SelectStatementModeColumns string = "columns"
)

// prop value enum
func (m *SelectStatement) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, selectStatementTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SelectStatement) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *SelectStatement) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *SelectStatement) validateSelectClause(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectClause) { // not required
		return nil
	}

	for i := 0; i < len(m.SelectClause); i++ {
		if swag.IsZero(m.SelectClause[i]) { // not required
			continue
		}

		if m.SelectClause[i] != nil {
			if err := m.SelectClause[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("select_clause" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SelectStatement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelectStatement) UnmarshalBinary(b []byte) error {
	var res SelectStatement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
